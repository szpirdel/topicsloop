# Generated by Django 5.2.6 on 2025-09-18 17:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('blog', '0005_alter_comment_author'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmbeddingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('post_embedding', 'Post Embedding'), ('user_embedding', 'User Interest Embedding'), ('category_embedding', 'Category Embedding'), ('similarity_calculation', 'Similarity Calculation')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('model_name', models.CharField(max_length=100)),
                ('target_id', models.PositiveIntegerField(help_text='ID of the target object (post, user, etc.)')),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['status', 'job_type'], name='ai_models_e_status_b3b1c5_idx'), models.Index(fields=['created_at'], name='ai_models_e_created_fcfef9_idx')],
            },
        ),
        migrations.CreateModel(
            name='CategoryEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text="Name of the model used to generate embeddings (e.g., 'mistral-7b', 'sentence-transformers')", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aggregated_vector', models.JSONField(help_text='Vector aggregated from all posts in this category')),
                ('vector_dimension', models.PositiveIntegerField()),
                ('post_count', models.PositiveIntegerField(default=0, help_text='Number of posts used to create this aggregation')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='embeddings', to='blog.category')),
            ],
            options={
                'unique_together': {('category', 'model_name')},
            },
        ),
        migrations.CreateModel(
            name='PostEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text="Name of the model used to generate embeddings (e.g., 'mistral-7b', 'sentence-transformers')", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('embedding_vector', models.JSONField(help_text='Vector representation of the post content (list of floats)')),
                ('embedding_dimension', models.PositiveIntegerField(help_text='Dimension of the embedding vector')),
                ('content_hash', models.CharField(help_text='Hash of the content used to detect changes', max_length=64)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='embeddings', to='blog.post')),
            ],
            options={
                'indexes': [models.Index(fields=['post', 'model_name'], name='ai_models_p_post_id_77668c_idx'), models.Index(fields=['created_at'], name='ai_models_p_created_be5020_idx')],
                'unique_together': {('post', 'model_name')},
            },
        ),
        migrations.CreateModel(
            name='PostSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score between 0.0 (completely different) and 1.0 (identical)')),
                ('algorithm', models.CharField(choices=[('cosine', 'Cosine Similarity'), ('euclidean', 'Euclidean Distance'), ('manhattan', 'Manhattan Distance'), ('semantic', 'Semantic Similarity (AI-based)')], default='cosine', max_length=20)),
                ('model_name', models.CharField(help_text='Model used to calculate similarity', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_first', to='blog.post')),
                ('post2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_second', to='blog.post')),
            ],
            options={
                'indexes': [models.Index(fields=['post1', 'similarity_score'], name='ai_models_p_post1_i_fb7545_idx'), models.Index(fields=['similarity_score'], name='ai_models_p_similar_7a9f1d_idx'), models.Index(fields=['algorithm', 'model_name'], name='ai_models_p_algorit_58c1dd_idx')],
                'unique_together': {('post1', 'post2', 'algorithm', 'model_name')},
            },
        ),
        migrations.CreateModel(
            name='UserEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text="Name of the model used to generate embeddings (e.g., 'mistral-7b', 'sentence-transformers')", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('interest_vector', models.JSONField(help_text="Aggregated vector representing user's interests")),
                ('vector_dimension', models.PositiveIntegerField(help_text='Dimension of the interest vector')),
                ('activity_count', models.PositiveIntegerField(default=0, help_text='Number of activities used to build this embedding')),
                ('last_activity_at', models.DateTimeField(blank=True, help_text='Last user activity that contributed to this embedding', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='interest_embedding', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'model_name')},
            },
        ),
    ]
